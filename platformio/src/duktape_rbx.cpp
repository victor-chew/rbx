/*
 * THIS FILE IS GENERATED BY <parse_rbx.py>. DO NOT EDIT THIS FILE DIRECTLY.
 */

#include <rbx.h>
#include <duktape.h>
#include <webserver.h>

enum { LED, OLEDDISPLAY, PUSHBUTTON, ROTARYSWITCH, BUZZER, PHOTORESISTOR, MOTOR, SERVO, SONAR, COLORSENSOR, MOTIONSENSOR };

int rbx_ptr_count = 0;
int rbx_type[64];
void* rbx_ptr[64];

void add_rbx_ptr(int type, void* ptr) {
	rbx_type[rbx_ptr_count] = type;
	rbx_ptr[rbx_ptr_count] = ptr;
	++rbx_ptr_count;
}

// Led(port)
duk_ret_t Led_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Led(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Led *ptr = new Led(port);
	add_rbx_ptr(LED, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Led_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void Led.setState(state)
duk_ret_t Led_setState(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setState(state)");
		return duk_throw(ctx);
	}
	bool state = (bool)duk_require_boolean(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Led* ptr = (Led*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setState(state);
	return 0;
}

void Led_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Led_setState, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setState");
	duk_put_global_string(ctx, "Led_prototype");
	duk_push_c_function(ctx, Led_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Led");
}

// OledDisplay()
duk_ret_t OledDisplay_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	OledDisplay *ptr = new OledDisplay();
	add_rbx_ptr(OLEDDISPLAY, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "OledDisplay_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void OledDisplay.startBuffer()
duk_ret_t OledDisplay_startBuffer(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->startBuffer();
	return 0;
}

// void OledDisplay.flushBuffer()
duk_ret_t OledDisplay_flushBuffer(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->flushBuffer();
	return 0;
}

// void OledDisplay.clear()
duk_ret_t OledDisplay_clear(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->clear();
	return 0;
}

// void OledDisplay.setColor(color)
duk_ret_t OledDisplay_setColor(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setColor(color)");
		return duk_throw(ctx);
	}
	int color = (int)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setColor(color);
	return 0;
}

// void OledDisplay.setFont(font)
duk_ret_t OledDisplay_setFont(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setFont(font)");
		return duk_throw(ctx);
	}
	int font = (int)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setFont(font);
	return 0;
}

// int OledDisplay.width()
duk_ret_t OledDisplay_width(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->width();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// int OledDisplay.height()
duk_ret_t OledDisplay_height(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->height();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// int OledDisplay.stringWidth(str)
duk_ret_t OledDisplay_stringWidth(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "stringWidth(str)");
		return duk_throw(ctx);
	}
	const char* str = (const char*)duk_require_string(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->stringWidth(str);
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// int OledDisplay.stringHeight(str)
duk_ret_t OledDisplay_stringHeight(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "stringHeight(str)");
		return duk_throw(ctx);
	}
	const char* str = (const char*)duk_require_string(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->stringHeight(str);
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// void OledDisplay.drawPixel(x, y)
duk_ret_t OledDisplay_drawPixel(duk_context* ctx) {
	if (duk_get_top(ctx) < 2) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "drawPixel(x, y)");
		return duk_throw(ctx);
	}
	int x = (int)duk_require_number(ctx, 0);
	int y = (int)duk_require_number(ctx, 1);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->drawPixel(x, y);
	return 0;
}

// void OledDisplay.drawLine(x1, y1, x2, y2)
duk_ret_t OledDisplay_drawLine(duk_context* ctx) {
	if (duk_get_top(ctx) < 4) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "drawLine(x1, y1, x2, y2)");
		return duk_throw(ctx);
	}
	int x1 = (int)duk_require_number(ctx, 0);
	int y1 = (int)duk_require_number(ctx, 1);
	int x2 = (int)duk_require_number(ctx, 2);
	int y2 = (int)duk_require_number(ctx, 3);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->drawLine(x1, y1, x2, y2);
	return 0;
}

// void OledDisplay.drawRect(x1, y1, x2, y2, filled=false)
duk_ret_t OledDisplay_drawRect(duk_context* ctx) {
	if (duk_get_top(ctx) < 4) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "drawRect(x1, y1, x2, y2, filled=false)");
		return duk_throw(ctx);
	}
	int x1 = (int)duk_require_number(ctx, 0);
	int y1 = (int)duk_require_number(ctx, 1);
	int x2 = (int)duk_require_number(ctx, 2);
	int y2 = (int)duk_require_number(ctx, 3);
	bool filled = (bool)duk_get_boolean_default(ctx, 4, false);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->drawRect(x1, y1, x2, y2, filled);
	return 0;
}

// void OledDisplay.drawEllipse(x, y, rx, ry, filled=false)
duk_ret_t OledDisplay_drawEllipse(duk_context* ctx) {
	if (duk_get_top(ctx) < 4) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "drawEllipse(x, y, rx, ry, filled=false)");
		return duk_throw(ctx);
	}
	int x = (int)duk_require_number(ctx, 0);
	int y = (int)duk_require_number(ctx, 1);
	int rx = (int)duk_require_number(ctx, 2);
	int ry = (int)duk_require_number(ctx, 3);
	bool filled = (bool)duk_get_boolean_default(ctx, 4, false);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->drawEllipse(x, y, rx, ry, filled);
	return 0;
}

// void OledDisplay.drawString(x, y, str)
duk_ret_t OledDisplay_drawString(duk_context* ctx) {
	if (duk_get_top(ctx) < 3) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "drawString(x, y, str)");
		return duk_throw(ctx);
	}
	int x = (int)duk_require_number(ctx, 0);
	int y = (int)duk_require_number(ctx, 1);
	const char* str = (const char*)duk_require_string(ctx, 2);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	OledDisplay* ptr = (OledDisplay*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->drawString(x, y, str);
	return 0;
}

void OledDisplay_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, OledDisplay_startBuffer, 0);
	duk_put_prop_string(ctx, -2, "startBuffer");
	duk_push_c_function(ctx, OledDisplay_flushBuffer, 0);
	duk_put_prop_string(ctx, -2, "flushBuffer");
	duk_push_c_function(ctx, OledDisplay_clear, 0);
	duk_put_prop_string(ctx, -2, "clear");
	duk_push_c_function(ctx, OledDisplay_setColor, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setColor");
	duk_push_c_function(ctx, OledDisplay_setFont, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setFont");
	duk_push_c_function(ctx, OledDisplay_width, 0);
	duk_put_prop_string(ctx, -2, "width");
	duk_push_c_function(ctx, OledDisplay_height, 0);
	duk_put_prop_string(ctx, -2, "height");
	duk_push_c_function(ctx, OledDisplay_stringWidth, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "stringWidth");
	duk_push_c_function(ctx, OledDisplay_stringHeight, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "stringHeight");
	duk_push_c_function(ctx, OledDisplay_drawPixel, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "drawPixel");
	duk_push_c_function(ctx, OledDisplay_drawLine, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "drawLine");
	duk_push_c_function(ctx, OledDisplay_drawRect, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "drawRect");
	duk_push_c_function(ctx, OledDisplay_drawEllipse, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "drawEllipse");
	duk_push_c_function(ctx, OledDisplay_drawString, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "drawString");
	duk_put_global_string(ctx, "OledDisplay_prototype");
	duk_push_c_function(ctx, OledDisplay_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "OledDisplay");
}

// Pushbutton(port)
duk_ret_t Pushbutton_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Pushbutton(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Pushbutton *ptr = new Pushbutton(port);
	add_rbx_ptr(PUSHBUTTON, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Pushbutton_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// bool Pushbutton.on()
duk_ret_t Pushbutton_on(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Pushbutton* ptr = (Pushbutton*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->on();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

// bool Pushbutton.off()
duk_ret_t Pushbutton_off(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Pushbutton* ptr = (Pushbutton*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->off();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

// bool Pushbutton.clicked()
duk_ret_t Pushbutton_clicked(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Pushbutton* ptr = (Pushbutton*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->clicked();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

void Pushbutton_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Pushbutton_on, 0);
	duk_put_prop_string(ctx, -2, "on");
	duk_push_c_function(ctx, Pushbutton_off, 0);
	duk_put_prop_string(ctx, -2, "off");
	duk_push_c_function(ctx, Pushbutton_clicked, 0);
	duk_put_prop_string(ctx, -2, "clicked");
	duk_put_global_string(ctx, "Pushbutton_prototype");
	duk_push_c_function(ctx, Pushbutton_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Pushbutton");
}

// RotarySwitch(port2, port4, stepsPerNotch=2)
duk_ret_t RotarySwitch_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 2) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "RotarySwitch(port2, port4, stepsPerNotch=2)");
		return duk_throw(ctx);
	}
	int port2 = (int)duk_require_number(ctx, 0);
	int port4 = (int)duk_require_number(ctx, 1);
	int stepsPerNotch = (int)duk_get_number_default(ctx, 2, 2);
	RotarySwitch *ptr = new RotarySwitch(port2, port4, stepsPerNotch);
	add_rbx_ptr(ROTARYSWITCH, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "RotarySwitch_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// int RotarySwitch.getDelta()
duk_ret_t RotarySwitch_getDelta(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	RotarySwitch* ptr = (RotarySwitch*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->getDelta();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// bool RotarySwitch.on()
duk_ret_t RotarySwitch_on(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	RotarySwitch* ptr = (RotarySwitch*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->on();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

// bool RotarySwitch.off()
duk_ret_t RotarySwitch_off(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	RotarySwitch* ptr = (RotarySwitch*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->off();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

// bool RotarySwitch.clicked()
duk_ret_t RotarySwitch_clicked(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	RotarySwitch* ptr = (RotarySwitch*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->clicked();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

void RotarySwitch_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, RotarySwitch_getDelta, 0);
	duk_put_prop_string(ctx, -2, "getDelta");
	duk_push_c_function(ctx, RotarySwitch_on, 0);
	duk_put_prop_string(ctx, -2, "on");
	duk_push_c_function(ctx, RotarySwitch_off, 0);
	duk_put_prop_string(ctx, -2, "off");
	duk_push_c_function(ctx, RotarySwitch_clicked, 0);
	duk_put_prop_string(ctx, -2, "clicked");
	duk_put_global_string(ctx, "RotarySwitch_prototype");
	duk_push_c_function(ctx, RotarySwitch_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "RotarySwitch");
}

// Buzzer(port)
duk_ret_t Buzzer_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Buzzer(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Buzzer *ptr = new Buzzer(port);
	add_rbx_ptr(BUZZER, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Buzzer_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void Buzzer.playTone(freq, duration=0)
duk_ret_t Buzzer_playTone(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "playTone(freq, duration=0)");
		return duk_throw(ctx);
	}
	int freq = (int)duk_require_number(ctx, 0);
	int duration = (int)duk_get_number_default(ctx, 1, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Buzzer* ptr = (Buzzer*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->playTone(freq, duration);
	return 0;
}

// void Buzzer.playNote(note, octave, duration=0)
duk_ret_t Buzzer_playNote(duk_context* ctx) {
	if (duk_get_top(ctx) < 2) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "playNote(note, octave, duration=0)");
		return duk_throw(ctx);
	}
	int note = (int)duk_require_number(ctx, 0);
	int octave = (int)duk_require_number(ctx, 1);
	int duration = (int)duk_get_number_default(ctx, 2, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Buzzer* ptr = (Buzzer*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->playNote(note, octave, duration);
	return 0;
}

// void Buzzer.stop()
duk_ret_t Buzzer_stop(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Buzzer* ptr = (Buzzer*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->stop();
	return 0;
}

void Buzzer_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Buzzer_playTone, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "playTone");
	duk_push_c_function(ctx, Buzzer_playNote, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "playNote");
	duk_push_c_function(ctx, Buzzer_stop, 0);
	duk_put_prop_string(ctx, -2, "stop");
	duk_put_global_string(ctx, "Buzzer_prototype");
	duk_push_c_function(ctx, Buzzer_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Buzzer");
}

// Photoresistor(port)
duk_ret_t Photoresistor_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Photoresistor(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Photoresistor *ptr = new Photoresistor(port);
	add_rbx_ptr(PHOTORESISTOR, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Photoresistor_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// float Photoresistor.getValue()
duk_ret_t Photoresistor_getValue(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Photoresistor* ptr = (Photoresistor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getValue();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

void Photoresistor_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Photoresistor_getValue, 0);
	duk_put_prop_string(ctx, -2, "getValue");
	duk_put_global_string(ctx, "Photoresistor_prototype");
	duk_push_c_function(ctx, Photoresistor_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Photoresistor");
}

// Motor(port)
duk_ret_t Motor_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Motor(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Motor *ptr = new Motor(port);
	add_rbx_ptr(MOTOR, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Motor_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void Motor.setSpeed(speed)
duk_ret_t Motor_setSpeed(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setSpeed(speed)");
		return duk_throw(ctx);
	}
	float speed = (float)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Motor* ptr = (Motor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setSpeed(speed);
	return 0;
}

// void Motor.setDir(dir)
duk_ret_t Motor_setDir(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setDir(dir)");
		return duk_throw(ctx);
	}
	int dir = (int)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Motor* ptr = (Motor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setDir(dir);
	return 0;
}

// void Motor.start()
duk_ret_t Motor_start(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Motor* ptr = (Motor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->start();
	return 0;
}

// void Motor.stop()
duk_ret_t Motor_stop(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Motor* ptr = (Motor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->stop();
	return 0;
}

void Motor_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Motor_setSpeed, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setSpeed");
	duk_push_c_function(ctx, Motor_setDir, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setDir");
	duk_push_c_function(ctx, Motor_start, 0);
	duk_put_prop_string(ctx, -2, "start");
	duk_push_c_function(ctx, Motor_stop, 0);
	duk_put_prop_string(ctx, -2, "stop");
	duk_put_global_string(ctx, "Motor_prototype");
	duk_push_c_function(ctx, Motor_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Motor");
}

// Servo(port, degree=0)
duk_ret_t Servo_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Servo(port, degree=0)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	int degree = (int)duk_get_number_default(ctx, 1, 0);
	Servo *ptr = new Servo(port, degree);
	add_rbx_ptr(SERVO, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Servo_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void Servo.setPos(degree)
duk_ret_t Servo_setPos(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setPos(degree)");
		return duk_throw(ctx);
	}
	int degree = (int)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Servo* ptr = (Servo*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setPos(degree);
	return 0;
}

// int Servo.getPos()
duk_ret_t Servo_getPos(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Servo* ptr = (Servo*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->getPos();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

void Servo_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Servo_setPos, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setPos");
	duk_push_c_function(ctx, Servo_getPos, 0);
	duk_put_prop_string(ctx, -2, "getPos");
	duk_put_global_string(ctx, "Servo_prototype");
	duk_push_c_function(ctx, Servo_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Servo");
}

// Sonar(port)
duk_ret_t Sonar_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "Sonar(port)");
		return duk_throw(ctx);
	}
	int port = (int)duk_require_number(ctx, 0);
	Sonar *ptr = new Sonar(port);
	add_rbx_ptr(SONAR, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "Sonar_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// int Sonar.getDistance()
duk_ret_t Sonar_getDistance(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	Sonar* ptr = (Sonar*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->getDistance();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

void Sonar_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, Sonar_getDistance, 0);
	duk_put_prop_string(ctx, -2, "getDistance");
	duk_put_global_string(ctx, "Sonar_prototype");
	duk_push_c_function(ctx, Sonar_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "Sonar");
}

// ColorSensor(port2, port4)
duk_ret_t ColorSensor_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	if (duk_get_top(ctx) < 2) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "ColorSensor(port2, port4)");
		return duk_throw(ctx);
	}
	int port2 = (int)duk_require_number(ctx, 0);
	int port4 = (int)duk_require_number(ctx, 1);
	ColorSensor *ptr = new ColorSensor(port2, port4);
	add_rbx_ptr(COLORSENSOR, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "ColorSensor_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// int ColorSensor.getColor()
duk_ret_t ColorSensor_getColor(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	ColorSensor* ptr = (ColorSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		int result = ptr->getColor();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// void ColorSensor.setColor(index)
duk_ret_t ColorSensor_setColor(duk_context* ctx) {
	if (duk_get_top(ctx) < 1) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "setColor(index)");
		return duk_throw(ctx);
	}
	int index = (int)duk_require_number(ctx, 0);
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	ColorSensor* ptr = (ColorSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->setColor(index);
	return 0;
}

// void ColorSensor.loadFromKeystore(prefix="")
duk_ret_t ColorSensor_loadFromKeystore(duk_context* ctx) {
	if (duk_get_top(ctx) < 0) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "loadFromKeystore(prefix="")");
		return duk_throw(ctx);
	}
	const char* prefix = (const char*)duk_get_string_default(ctx, 0, "");
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	ColorSensor* ptr = (ColorSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->loadFromKeystore(prefix);
	return 0;
}

// void ColorSensor.saveToKeystore(prefix="")
duk_ret_t ColorSensor_saveToKeystore(duk_context* ctx) {
	if (duk_get_top(ctx) < 0) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "saveToKeystore(prefix="")");
		return duk_throw(ctx);
	}
	const char* prefix = (const char*)duk_get_string_default(ctx, 0, "");
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	ColorSensor* ptr = (ColorSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->saveToKeystore(prefix);
	return 0;
}

void ColorSensor_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, ColorSensor_getColor, 0);
	duk_put_prop_string(ctx, -2, "getColor");
	duk_push_c_function(ctx, ColorSensor_setColor, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "setColor");
	duk_push_c_function(ctx, ColorSensor_loadFromKeystore, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "loadFromKeystore");
	duk_push_c_function(ctx, ColorSensor_saveToKeystore, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "saveToKeystore");
	duk_put_global_string(ctx, "ColorSensor_prototype");
	duk_push_c_function(ctx, ColorSensor_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "ColorSensor");
}

// MotionSensor()
duk_ret_t MotionSensor_constructor(duk_context* ctx) {
	if (!duk_is_constructor_call(ctx)) return DUK_RET_TYPE_ERROR;
	MotionSensor *ptr = new MotionSensor();
	add_rbx_ptr(MOTIONSENSOR, ptr);
	duk_push_object(ctx);
	duk_get_global_string(ctx, "MotionSensor_prototype");
	duk_set_prototype(ctx, -2);
	duk_push_pointer(ctx, (void*)ptr);
	duk_put_prop_string(ctx, -2, DUK_HIDDEN_SYMBOL("_ptr"));
	return 1;
}

// void MotionSensor.calibrateInit()
duk_ret_t MotionSensor_calibrateInit(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->calibrateInit();
	return 0;
}

// bool MotionSensor.calibrate()
duk_ret_t MotionSensor_calibrate(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		bool result = ptr->calibrate();
		duk_push_boolean(ctx, result);
		return 1;
	}
	return 0;
}

// void MotionSensor.refresh()
duk_ret_t MotionSensor_refresh(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->refresh();
	return 0;
}

// float MotionSensor.getRoll()
duk_ret_t MotionSensor_getRoll(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getRoll();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// float MotionSensor.getPitch()
duk_ret_t MotionSensor_getPitch(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getPitch();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// float MotionSensor.getYaw()
duk_ret_t MotionSensor_getYaw(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getYaw();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// float MotionSensor.getAccelX()
duk_ret_t MotionSensor_getAccelX(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getAccelX();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// float MotionSensor.getAccelY()
duk_ret_t MotionSensor_getAccelY(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getAccelY();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// float MotionSensor.getAccelZ()
duk_ret_t MotionSensor_getAccelZ(duk_context* ctx) {
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) {
		float result = ptr->getAccelZ();
		duk_push_number(ctx, result);
		return 1;
	}
	return 0;
}

// void MotionSensor.loadFromKeystore(prefix="")
duk_ret_t MotionSensor_loadFromKeystore(duk_context* ctx) {
	if (duk_get_top(ctx) < 0) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "loadFromKeystore(prefix="")");
		return duk_throw(ctx);
	}
	const char* prefix = (const char*)duk_get_string_default(ctx, 0, "");
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->loadFromKeystore(prefix);
	return 0;
}

// void MotionSensor.saveToKeystore(prefix="")
duk_ret_t MotionSensor_saveToKeystore(duk_context* ctx) {
	if (duk_get_top(ctx) < 0) {
		duk_push_error_object(ctx, DUK_ERR_TYPE_ERROR, "saveToKeystore(prefix="")");
		return duk_throw(ctx);
	}
	const char* prefix = (const char*)duk_get_string_default(ctx, 0, "");
	duk_push_this(ctx);
	duk_get_prop_string(ctx, -1, DUK_HIDDEN_SYMBOL("_ptr"));
	MotionSensor* ptr = (MotionSensor*)duk_get_pointer_default(ctx, -1, NULL);
	if (ptr) ptr->saveToKeystore(prefix);
	return 0;
}

void MotionSensor_init(duk_context* ctx) {
	duk_push_object(ctx);
	duk_push_c_function(ctx, MotionSensor_calibrateInit, 0);
	duk_put_prop_string(ctx, -2, "calibrateInit");
	duk_push_c_function(ctx, MotionSensor_calibrate, 0);
	duk_put_prop_string(ctx, -2, "calibrate");
	duk_push_c_function(ctx, MotionSensor_refresh, 0);
	duk_put_prop_string(ctx, -2, "refresh");
	duk_push_c_function(ctx, MotionSensor_getRoll, 0);
	duk_put_prop_string(ctx, -2, "getRoll");
	duk_push_c_function(ctx, MotionSensor_getPitch, 0);
	duk_put_prop_string(ctx, -2, "getPitch");
	duk_push_c_function(ctx, MotionSensor_getYaw, 0);
	duk_put_prop_string(ctx, -2, "getYaw");
	duk_push_c_function(ctx, MotionSensor_getAccelX, 0);
	duk_put_prop_string(ctx, -2, "getAccelX");
	duk_push_c_function(ctx, MotionSensor_getAccelY, 0);
	duk_put_prop_string(ctx, -2, "getAccelY");
	duk_push_c_function(ctx, MotionSensor_getAccelZ, 0);
	duk_put_prop_string(ctx, -2, "getAccelZ");
	duk_push_c_function(ctx, MotionSensor_loadFromKeystore, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "loadFromKeystore");
	duk_push_c_function(ctx, MotionSensor_saveToKeystore, DUK_VARARGS);
	duk_put_prop_string(ctx, -2, "saveToKeystore");
	duk_put_global_string(ctx, "MotionSensor_prototype");
	duk_push_c_function(ctx, MotionSensor_constructor, DUK_VARARGS);
	duk_put_global_string(ctx, "MotionSensor");
}

void RBX_init(duk_context* ctx) {
	// Delete instances created previously
	for (int i=0; i<rbx_ptr_count; i++) {
		switch(rbx_type[i]) {
			case LED: delete (Led*)rbx_ptr[i]; break;
			case OLEDDISPLAY: delete (OledDisplay*)rbx_ptr[i]; break;
			case PUSHBUTTON: delete (Pushbutton*)rbx_ptr[i]; break;
			case ROTARYSWITCH: delete (RotarySwitch*)rbx_ptr[i]; break;
			case BUZZER: delete (Buzzer*)rbx_ptr[i]; break;
			case PHOTORESISTOR: delete (Photoresistor*)rbx_ptr[i]; break;
			case MOTOR: delete (Motor*)rbx_ptr[i]; break;
			case SERVO: delete (Servo*)rbx_ptr[i]; break;
			case SONAR: delete (Sonar*)rbx_ptr[i]; break;
			case COLORSENSOR: delete (ColorSensor*)rbx_ptr[i]; break;
			case MOTIONSENSOR: delete (MotionSensor*)rbx_ptr[i]; break;
		}
	}
	rbx_ptr_count = 0;
	// Port constants
	duk_push_number(ctx, 0); duk_put_global_string(ctx, "PORT_2A");
	duk_push_number(ctx, 1); duk_put_global_string(ctx, "PORT_2B");
	duk_push_number(ctx, 2); duk_put_global_string(ctx, "PORT_2C");
	duk_push_number(ctx, 3); duk_put_global_string(ctx, "PORT_3A");
	duk_push_number(ctx, 4); duk_put_global_string(ctx, "PORT_3B");
	duk_push_number(ctx, 5); duk_put_global_string(ctx, "PORT_3C");
	duk_push_number(ctx, 6); duk_put_global_string(ctx, "PORT_3D");
	duk_push_number(ctx, 7); duk_put_global_string(ctx, "PORT_4A");
	duk_push_number(ctx, 8); duk_put_global_string(ctx, "PORT_4B");
	duk_push_number(ctx, 9); duk_put_global_string(ctx, "PORT_4C");
	duk_push_number(ctx, 10); duk_put_global_string(ctx, "PORT_4D");
	// Font constants
	duk_push_number(ctx, 0); duk_put_global_string(ctx, "FONT_SMALL");
	duk_push_number(ctx, 1); duk_put_global_string(ctx, "FONT_NORMAL");
	duk_push_number(ctx, 2); duk_put_global_string(ctx, "FONT_NORMAL_BOLD");
	duk_push_number(ctx, 3); duk_put_global_string(ctx, "FONT_LARGE");
	duk_push_number(ctx, 4); duk_put_global_string(ctx, "FONT_SYMBOL");
	// Color constants
	duk_push_number(ctx, 0); duk_put_global_string(ctx, "COLOR_BLACK");
	duk_push_number(ctx, 1); duk_put_global_string(ctx, "COLOR_WHITE");
	duk_push_number(ctx, 2); duk_put_global_string(ctx, "COLOR_INVERT");
	// Direction constants
	duk_push_number(ctx, 0); duk_put_global_string(ctx, "DIR_FWD");
	duk_push_number(ctx, 1); duk_put_global_string(ctx, "DIR_REV");
	// Note constants
	duk_push_number(ctx, 0); duk_put_global_string(ctx, "NOTE_C");
	duk_push_number(ctx, 1); duk_put_global_string(ctx, "NOTE_Cs");
	duk_push_number(ctx, 2); duk_put_global_string(ctx, "NOTE_D");
	duk_push_number(ctx, 3); duk_put_global_string(ctx, "NOTE_Eb");
	duk_push_number(ctx, 4); duk_put_global_string(ctx, "NOTE_E");
	duk_push_number(ctx, 5); duk_put_global_string(ctx, "NOTE_F");
	duk_push_number(ctx, 6); duk_put_global_string(ctx, "NOTE_Fs");
	duk_push_number(ctx, 7); duk_put_global_string(ctx, "NOTE_G");
	duk_push_number(ctx, 8); duk_put_global_string(ctx, "NOTE_Gs");
	duk_push_number(ctx, 9); duk_put_global_string(ctx, "NOTE_A");
	duk_push_number(ctx, 10); duk_put_global_string(ctx, "NOTE_Bb");
	duk_push_number(ctx, 11); duk_put_global_string(ctx, "NOTE_B");
	// RBX classes
	Led_init(ctx);
	OledDisplay_init(ctx);
	Pushbutton_init(ctx);
	RotarySwitch_init(ctx);
	Buzzer_init(ctx);
	Photoresistor_init(ctx);
	Motor_init(ctx);
	Servo_init(ctx);
	Sonar_init(ctx);
	ColorSensor_init(ctx);
	MotionSensor_init(ctx);
}

